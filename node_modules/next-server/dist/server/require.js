"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const constants_1 = require("next-server/constants");
function pageNotFoundError(page) {
    const err = new Error(`Cannot find module for page: ${page}`);
    err.code = 'ENOENT';
    return err;
}
exports.pageNotFoundError = pageNotFoundError;
function normalizePagePath(page) {
    // If the page is `/` we need to append `/index`, otherwise the returned directory root will be bundles instead of pages
    if (page === '/') {
        page = '/index';
    }
    // Resolve on anything that doesn't start with `/`
    if (page[0] !== '/') {
        page = `/${page}`;
    }
    // Throw when using ../ etc in the pathname
    const resolvedPage = path_1.posix.normalize(page);
    if (page !== resolvedPage) {
        throw new Error('Requested and resolved page mismatch');
    }
    return page;
}
exports.normalizePagePath = normalizePagePath;
function getPagePath(page, { distDir }) {
    const serverBuildPath = path_1.join(distDir, constants_1.SERVER_DIRECTORY);
    const pagesManifest = require(path_1.join(serverBuildPath, constants_1.PAGES_MANIFEST));
    try {
        page = normalizePagePath(page);
    }
    catch (err) {
        console.error(err);
        throw pageNotFoundError(page);
    }
    if (!pagesManifest[page]) {
        throw pageNotFoundError(page);
    }
    return path_1.join(serverBuildPath, pagesManifest[page]);
}
exports.getPagePath = getPagePath;
async function requirePage(page, { distDir }) {
    const pagePath = getPagePath(page, { distDir });
    return require(pagePath);
}
exports.default = requirePage;
