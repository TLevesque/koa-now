"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const utils_1 = require("./utils");
function withSideEffect(reduceComponentsToState, handleStateChangeOnClient, mapStateOnServer) {
    if (typeof reduceComponentsToState !== 'function') {
        throw new Error('Expected reduceComponentsToState to be a function.');
    }
    if (typeof handleStateChangeOnClient !== 'function') {
        throw new Error('Expected handleStateChangeOnClient to be a function.');
    }
    if (typeof mapStateOnServer !== 'undefined' && typeof mapStateOnServer !== 'function') {
        throw new Error('Expected mapStateOnServer to either be undefined or a function.');
    }
    return function wrap(WrappedComponent) {
        if (typeof WrappedComponent !== 'function') {
            throw new Error('Expected WrappedComponent to be a React component.');
        }
        const mountedInstances = new Set();
        let state;
        function emitChange(component) {
            state = reduceComponentsToState([...mountedInstances]);
            if (SideEffect.canUseDOM) {
                handleStateChangeOnClient.call(component, state);
            }
            else if (mapStateOnServer) {
                state = mapStateOnServer(state);
            }
        }
        class SideEffect extends react_1.Component {
            constructor(props) {
                super(props);
                if (!SideEffect.canUseDOM) {
                    mountedInstances.add(this);
                    emitChange(this);
                }
            }
            static peek() {
                return state;
            }
            static rewind() {
                if (SideEffect.canUseDOM) {
                    throw new Error('You may only call rewind() on the server. Call peek() to read the current state.');
                }
                const recordedState = state;
                state = undefined;
                mountedInstances.clear();
                return recordedState;
            }
            componentDidMount() {
                mountedInstances.add(this);
                emitChange(this);
            }
            componentDidUpdate() {
                emitChange(this);
            }
            componentWillUnmount() {
                mountedInstances.delete(this);
                emitChange(this);
            }
            render() {
                return react_1.default.createElement(WrappedComponent, null, this.props.children);
            }
        }
        // Expose canUseDOM so tests can monkeypatch it
        SideEffect.canUseDOM = typeof window !== 'undefined';
        SideEffect.contextTypes = WrappedComponent.contextTypes;
        // Try to use displayName of wrapped component
        SideEffect.displayName = `SideEffect(${utils_1.getDisplayName(WrappedComponent)})`;
        return SideEffect;
    };
}
exports.default = withSideEffect;
